// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oXYPe9dPJsk6AfdKWxYUef
// Component: zQZJ1PhRU3AI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: CyhRxYesc4p/component
import Button from "../../Button"; // plasmic-import: oGyXhpy4Jz9/component
import What from "../../What"; // plasmic-import: V_gLTPKtih/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: oXYPe9dPJsk6AfdKWxYUef/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: zQZJ1PhRU3AI/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: XDhWPpJrM7Y/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Tl3uVyw_rwC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: asZ9oVRtXCm/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  freeBox?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  what?: p.Flex<typeof What>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "numbers",
        type: "private",
        variableType: "array",
        initFunc: true ? ({ $props, $state, $queries, $ctx }) => [0] : undefined
      },
      {
        path: "what.textInput.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => undefined
          : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              about={(() => {
                try {
                  return "hello etc";
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first page!!!???"}
            </h1>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kaMfq
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>

            {true
              ? (
                  (() => {
                    try {
                      return $state.numbers;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <div
                    data-plasmic-name={"freeBox"}
                    data-plasmic-override={overrides.freeBox}
                    className={classNames(projectcss.all, sty.freeBox)}
                    key={currentIndex}
                  >
                    {(() => {
                      $state.registerInitFunc(
                        "textInput[].value",
                        true
                          ? ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "xx";
                                  }
                                  throw e;
                                }
                              })()
                          : undefined,
                        [currentIndex]
                      );

                      return (
                        <TextInput
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput
                          )}
                          onChange={(...args) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput",
                              currentIndex,
                              "value"
                            ])((e => e.target?.value).apply(null, args));
                          }}
                          value={p.generateStateValueProp($state, [
                            "textInput",
                            currentIndex,
                            "value"
                          ])}
                        />
                      );
                    })()}

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__zo2Bv
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["customFunction"] = true
                          ? (() => {
                              const args = {
                                customFunction: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "customFunction",
                                    interactionUuid: "r8TY56IQp",
                                    componentUuid: "zQZJ1PhRU3AI",
                                    argName: "customFunction"
                                  },
                                  () => () => {
                                    $state.numbers.splice(currentIndex, 1);
                                  }
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "r8TY56IQp",
                                  componentUuid: "zQZJ1PhRU3AI"
                                },
                                () =>
                                  (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [args]),
                                args
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["customFunction"] === "object" &&
                          typeof $steps["customFunction"].then === "function"
                        ) {
                          $steps["customFunction"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "customFunction",
                              interactionUuid: "r8TY56IQp",
                              componentUuid: "zQZJ1PhRU3AI"
                            },
                            $steps["customFunction"]
                          );
                        }
                      }}
                    />
                  </div>
                ))
              : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uEsl
              )}
            >
              {(() => {
                try {
                  return $state.textInput.map(x => x.value).join(" :: ");
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()}
            </div>

            <Button
              className={classNames("__wab_instance", sty.button__gw4Za)}
              onClick={async event => {
                const $steps = {};
                $steps["setNumbers"] = true
                  ? (() => {
                      const args = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "14YHYPN64",
                            componentUuid: "zQZJ1PhRU3AI",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["numbers"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "14YHYPN64",
                            componentUuid: "zQZJ1PhRU3AI",
                            argName: "operation"
                          },
                          () => 5
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "14YHYPN64",
                            componentUuid: "zQZJ1PhRU3AI",
                            argName: "value"
                          },
                          () => $state.numbers.length + 1
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "14YHYPN64",
                          componentUuid: "zQZJ1PhRU3AI"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            const { objRoot, variablePath } = variable;

                            const arr = p.get(objRoot, variablePath);
                            arr.push(value);
                            return arr;
                          })?.apply(null, [args]),
                        args
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["setNumbers"] === "object" &&
                  typeof $steps["setNumbers"].then === "function"
                ) {
                  $steps["setNumbers"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "14YHYPN64",
                      componentUuid: "zQZJ1PhRU3AI"
                    },
                    $steps["setNumbers"]
                  );
                }
              }}
            />

            <What
              data-plasmic-name={"what"}
              data-plasmic-override={overrides.what}
              className={classNames("__wab_instance", sty.what)}
              onWhatValueChange={p.generateStateOnChangeProp($state, [
                "what",

                "textInput",
                "value"
              ])}
              whatValue={p.generateStateValueProp($state, [
                "what",

                "textInput",
                "value"
              ])}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ernJn
              )}
            >
              {(() => {
                try {
                  return $state.what.textInput.value;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()}
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "h1", "freeBox", "textInput", "what"],
  section: ["section", "h1", "freeBox", "textInput", "what"],
  h1: ["h1"],
  freeBox: ["freeBox", "textInput"],
  textInput: ["textInput"],
  what: ["what"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  freeBox: "div";
  textInput: typeof TextInput;
  what: typeof What;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    freeBox: makeNodeComponent("freeBox"),
    textInput: makeNodeComponent("textInput"),
    what: makeNodeComponent("what"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
